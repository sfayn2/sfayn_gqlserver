from ddd.order_management.infrastructure.adapters import unit_of_work
import graphene
from graphene import relay
from ddd.order_management.application import (
    message_bus, commands, order_service, queries
  )
from ddd.order_management.domain import exceptions
from ddd.order_management.presentation.graphql import object_types, input_types
from ddd.order_management.infrastructure.adapters import (
    payments_adapter, 
    shipping_option_adapter,
    tax_adapter
)

# ==========================
# Mutations 
# ===================
class PlaceOrderMutation(relay.ClientIDMutation):
    class Input:
        order_id = graphene.String()

    order = graphene.Field(object_types.OrderResponseType)

    @classmethod
    def mutate_and_get_payload(cls, root, info, **input):
        command = commands.PlaceOrderCommand.model_validate(input)
        placed_order = message_bus.handle(command, unit_of_work.DjangoOrderUnitOfWork())
        #placed order status only in Pending; once payment is confirmed ; webhook will trigger and call api to confirm order

        return cls(order=object_types.OrderResponseType(**placed_order.model_dump()))


# ======
# expected to call in front end via Paypal onApprove ?
# expected to createOrder via paypal.Buttons and make sure to include amount custom_id (internal order_id) 
# ===========

class ConfirmOrderMutation(relay.ClientIDMutation):
    class Input:
        order_id = graphene.String(required=True) #our own order id
        transaction_id = graphene.String(required=True) #paypal autogenerated order id
        payment_method = graphene.String(required=True)

    order = graphene.Field(object_types.OrderResponseType)

    @classmethod
    def mutate_and_get_payload(cls, root, info, **input):
        command = commands.ConfirmOrderCommand.model_validate(input)
        confirmed_order = message_bus.handle(command, unit_of_work.DjangoOrderUnitOfWork())
        return cls(order=object_types.OrderResponseType(**confirmed_order.model_dump()))

class SelectShippingOptionMutation(relay.ClientIDMutation):
    class Input:
        order_id = graphene.String(required=True)
        shipping_details = graphene.Field(input_types.ShippingDetailsInput, required=True)


    #TODO: should return Shipping details response
    order = graphene.Field(object_types.OrderResponseType)

    @classmethod
    def mutate_and_get_payload(cls, root, info, **input):
        command = commands.SelectShippingOptionCommand.model_validate(input)
        shipping_option = message_bus.handle(command, unit_of_work.DjangoOrderUnitOfWork())
        return cls(order=object_types.OrderResponseType(**shipping_option.model_dump()))


class CheckoutItemsMutation(relay.ClientIDMutation):
    class Input:
        customer_details = graphene.Field(input_types.CustomerDetailsInput, required=True)
        shipping_address = graphene.Field(input_types.AddressInput, required=True)
        line_items = graphene.List(input_types.LineItemInput, required=True)

    order = graphene.Field(object_types.OrderResponseType)

    @classmethod
    def mutate_and_get_payload(cls, root, info, **input):
        command = commands.CheckoutItemsCommand.model_validate(input)
        draft_order = message_bus.handle(command, unit_of_work.DjangoOrderUnitOfWork())
        return cls(order=object_types.OrderResponseType(**draft_order.model_dump()))

# ===========
# Query resolvere here
# ==========
class Query(graphene.ObjectType):

    #shipping_options = graphene.List(ShippingDetailsType)
    shipping_options_by_order_id = graphene.List(input_types.ShippingDetailsType, order_id=graphene.String(required=True))
    def resolve_shipping_options_by_order_id(root, info, order_id):
        query = queries.ShippingOptionsQuery(order_id=order_id)
        shipping_options = message_bus.handle(query, unit_of_work.DjangoOrderUnitOfWork())

        return shipping_options







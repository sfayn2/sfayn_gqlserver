from ddd.order_management.infrastructure.adapters import unit_of_work
import graphene
from graphene import relay
from ddd.order_management.application import (
    message_bus, commands, order_service, queries
  )
from ddd.order_management.domain import exceptions
from ddd.order_management.presentation.graphql import object_types, input_types, common, factories
from ddd.order_management.infrastructure.adapters import (
    payments_adapter, 
    shipping_option_adapter,
    tax_adapter
)

# ==========================
# Mutations 
# ===================
class PlaceOrderMutation(common.BaseOrderMutation):
    class Input:
        order_id = graphene.String()

    command_class = commands.PlaceOrderCommand
    exception_message = "Unexpected error during place order"


# ======
# expected to call in front end via Paypal onApprove ?
# expected to createOrder via paypal.Buttons and make sure to include amount custom_id (internal order_id) 
# ===========

class ConfirmOrderMutation(common.BaseOrderMutation):
    class Input:
        order_id = graphene.String(required=True) #our own order id
        transaction_id = graphene.String(required=True) #paypal autogenerated order id
        payment_method = graphene.String(required=True)

    command_class = commands.ConfirmOrderCommand
    exception_message = "Unexpected error during order confirmation."
    dependencies = {
        "payment_gateway_factory": payments_adapter.PaymentGatewayFactory(),
        "order_service": order_service.OrderService(),
        "tax_service": tax_adapter
    }

class SelectShippingOptionMutation(common.BaseOrderMutation):
    class Input:
        order_id = graphene.String(required=True)
        shipping_details = graphene.Field(input_types.ShippingDetailsInput, required=True)

    command_class = commands.SelectShippingOptionCommand
    exception_message = "Unexpected error during shipping option selection"
    dependencies = {
        "shipping_option_service": shipping_option_adapter.ShippingOptionStrategyService,
        "order_service": order_service.OrderService()
    }


class CheckoutItemsMutation(common.BaseOrderMutation):
    class Input:
        customer_details = graphene.Field(input_types.CustomerDetailsInput, required=True)
        shipping_address = graphene.Field(input_types.AddressInput, required=True)
        line_items = graphene.List(input_types.LineItemInput, required=True)

    command_class = commands.CheckoutItemsCommand
    exception_message = "Unexpected error during cart items checkout"

# ===========
# Query resolvere here
# ==========
class Query(graphene.ObjectType):

    #shipping_options = graphene.List(ShippingDetailsType)
    shipping_options_by_order_id = graphene.List(input_types.ShippingDetailsType, order_id=graphene.String(required=True))
    def resolve_shipping_options_by_order_id(root, info, order_id):
        query = queries.ShippingOptionsQuery(order_id=order_id)
        dependencies = {
            "shipping_option_service": shipping_option_adapter.ShippingOptionStrategyService,
            "order_service": order_service.OrderService()
        }
        shipping_options = message_bus.handle(query, unit_of_work.DjangoOrderUnitOfWork(), dependencies=dependencies)

        return shipping_options






